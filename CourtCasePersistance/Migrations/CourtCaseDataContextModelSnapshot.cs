// <auto-generated />
using System;
using CourtCasePersistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourtCasePersistance.Migrations
{
    [DbContext(typeof(CourtCaseDataContext))]
    partial class CourtCaseDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourtCaseDomain.Case", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("TypeId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(6, 0)");

                    b.Property<decimal>("CurrentStatus")
                        .HasColumnType("numeric(2, 0)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentId", "TypeId", "Id")
                        .HasName("PK_CASE");

                    b.HasIndex(new[] { "CurrentStatus" }, "CASESTATUS_FK");

                    b.HasIndex(new[] { "DepartmentId" }, "DEPARTMENT");

                    b.HasIndex(new[] { "TypeId" }, "TYPE_FK");

                    b.ToTable("Case", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.CasePhase", b =>
                {
                    b.Property<string>("TypeId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.HasKey("TypeId", "Id")
                        .HasName("PK_CASEPHASE");

                    b.HasIndex(new[] { "TypeId" }, "PHASE_FK");

                    b.ToTable("CasePhase", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.CasePhaseHistory", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("TypeId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<decimal>("CaseNo")
                        .HasColumnType("numeric(6, 0)");

                    b.Property<string>("PhaseId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("No"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentId", "TypeId", "CaseNo", "PhaseId", "No")
                        .HasName("PK_CASEPHASEHISTORY");

                    b.HasIndex(new[] { "DepartmentId", "TypeId", "CaseNo" }, "FOR_CASE_FK");

                    b.HasIndex(new[] { "TypeId", "PhaseId" }, "PHASE_DURATION_FK");

                    b.ToTable("CasePhaseHistory", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.CaseStatus", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(2, 0)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id")
                        .HasName("PK_CASESTATUS");

                    b.ToTable("CaseStatus", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.CaseStatusHistory", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("TypeId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<decimal>("CaseId")
                        .HasColumnType("numeric(6, 0)");

                    b.Property<decimal>("StatusId")
                        .HasColumnType("numeric(2, 0)");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("No"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Judge")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentId", "TypeId", "CaseId", "StatusId", "No")
                        .HasName("PK_CASESTATUSHISTORY");

                    b.HasIndex(new[] { "DepartmentId", "TypeId", "CaseId" }, "CASE_FK");

                    b.HasIndex(new[] { "StatusId" }, "CASE_STATUS_FK");

                    b.ToTable("CaseStatusHistory", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.CaseWorker", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<decimal>("CaseId")
                        .HasColumnType("numeric(6, 0)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("JobId")
                        .HasColumnType("numeric(4, 0)");

                    b.Property<string>("TypeId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.HasKey("DepartmentId", "CaseId", "EmployeeId", "JobId", "TypeId")
                        .HasName("PK_CASEWORKER");

                    b.HasIndex(new[] { "DepartmentId", "TypeId", "CaseId" }, "CASE_FK");

                    b.HasIndex(new[] { "JobId", "TypeId" }, "JOB_TYPE_FK");

                    b.HasIndex(new[] { "EmployeeId" }, "WORKER_FK");

                    b.ToTable("CaseWorker", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.Court", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id")
                        .HasName("PK_COURT");

                    b.ToTable("Court", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.CourtCase", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("TypeId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<decimal>("CaseId")
                        .HasColumnType("numeric(6, 0)");

                    b.Property<string>("CourtId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("No"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentId", "TypeId", "CaseId", "CourtId", "No")
                        .HasName("PK_COURTCASES");

                    b.HasIndex(new[] { "DepartmentId", "TypeId", "CaseId" }, "CASE_FK");

                    b.HasIndex(new[] { "CourtId" }, "COURT_FK");

                    b.ToTable("CourtCases", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id")
                        .HasName("PK_DEPARTMENT");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Jmbg")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("JMBG");

                    b.Property<string>("ParentName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Surename")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("PK_EMPLOYEE");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.EmployeeInDepartment", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<decimal>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(6, 0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("No"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeId", "DepartmentId", "No")
                        .HasName("PK_EMPLOYEEINDEPARTMENT");

                    b.HasIndex(new[] { "DepartmentId" }, "DEPARTMENT_FK");

                    b.HasIndex(new[] { "EmployeeId" }, "EMPLOYEE_FK");

                    b.ToTable("EmployeeInDepartment", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.Hearing", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("TypeId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<decimal>("CaseId")
                        .HasColumnType("numeric(6, 0)");

                    b.Property<string>("CourtId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("No"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Record")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentId", "TypeId", "CaseId", "CourtId", "No")
                        .HasName("PK_HEARING");

                    b.HasIndex(new[] { "DepartmentId", "TypeId", "CaseId" }, "CASE_FK");

                    b.HasIndex(new[] { "CourtId" }, "COURT_FK");

                    b.ToTable("Hearing", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.JobCatalog", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(4, 0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<decimal>("PlannedNumber")
                        .HasColumnType("numeric(3, 0)");

                    b.HasKey("Id")
                        .HasName("PK_JOBCATALOG");

                    b.ToTable("JobCatalog", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.JobPerType", b =>
                {
                    b.Property<decimal>("JobId")
                        .HasColumnType("numeric(4, 0)");

                    b.Property<string>("TypeId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.HasKey("JobId", "TypeId")
                        .HasName("PK_JOBPERTYPE");

                    b.HasIndex(new[] { "JobId" }, "JOB_FK");

                    b.HasIndex(new[] { "TypeId" }, "TYPE_FK");

                    b.ToTable("JobPerType", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.SubjectType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id")
                        .HasName("PK_SUBJECTTYPE");

                    b.ToTable("SubjectType", (string)null);
                });

            modelBuilder.Entity("CourtCaseDomain.Case", b =>
                {
                    b.HasOne("CourtCaseDomain.CaseStatus", "CurrentStatusNavigation")
                        .WithMany("Cases")
                        .HasForeignKey("CurrentStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CASE_RELATIONS_CASESTAT");

                    b.HasOne("CourtCaseDomain.Department", "Department")
                        .WithMany("Cases")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CASE_DEPARTMEN_DEPARTME");

                    b.HasOne("CourtCaseDomain.SubjectType", "Type")
                        .WithMany("Cases")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CASE_TYPE_SUBJECTT");

                    b.Navigation("CurrentStatusNavigation");

                    b.Navigation("Department");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CourtCaseDomain.CasePhase", b =>
                {
                    b.HasOne("CourtCaseDomain.SubjectType", "Type")
                        .WithMany("CasePhases")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CASEPHAS_FAZA_SUBJECTT");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CourtCaseDomain.CasePhaseHistory", b =>
                {
                    b.HasOne("CourtCaseDomain.CasePhase", "CasePhase")
                        .WithMany("CasePhaseHistories")
                        .HasForeignKey("TypeId", "PhaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CASEPHAS_DURATION__CASEPHAS");

                    b.HasOne("CourtCaseDomain.Case", "Case")
                        .WithMany("CasePhaseHistories")
                        .HasForeignKey("DepartmentId", "TypeId", "CaseNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CASEPHAS_FOR_CASE_CASE");

                    b.Navigation("Case");

                    b.Navigation("CasePhase");
                });

            modelBuilder.Entity("CourtCaseDomain.CaseStatusHistory", b =>
                {
                    b.HasOne("CourtCaseDomain.CaseStatus", "Status")
                        .WithMany("CaseStatusHistories")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CASESTAT_RELATIONS_CASESTAT");

                    b.HasOne("CourtCaseDomain.Case", "Case")
                        .WithMany("CaseStatusHistories")
                        .HasForeignKey("DepartmentId", "TypeId", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CASESTAT_RELATIONS_CASE");

                    b.Navigation("Case");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CourtCaseDomain.CaseWorker", b =>
                {
                    b.HasOne("CourtCaseDomain.Employee", "Employee")
                        .WithMany("CaseWorkers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CASEWORK_RADI_NA_P_EMPLOYEE");

                    b.HasOne("CourtCaseDomain.JobPerType", "JobPerType")
                        .WithMany("CaseWorkers")
                        .HasForeignKey("JobId", "TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CASEWORK_RELATIONS_JOBPERTY");

                    b.HasOne("CourtCaseDomain.Case", "Case")
                        .WithMany("CaseWorkers")
                        .HasForeignKey("DepartmentId", "TypeId", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CASEWORK_ZAPOSLENI_CASE");

                    b.Navigation("Case");

                    b.Navigation("Employee");

                    b.Navigation("JobPerType");
                });

            modelBuilder.Entity("CourtCaseDomain.CourtCase", b =>
                {
                    b.HasOne("CourtCaseDomain.Court", "Court")
                        .WithMany("CourtCases")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_COURTCAS_RELATIONS_COURT");

                    b.HasOne("CourtCaseDomain.Case", "Case")
                        .WithMany("CourtCases")
                        .HasForeignKey("DepartmentId", "TypeId", "CaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_COURTCAS_RELATIONS_CASE");

                    b.Navigation("Case");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("CourtCaseDomain.EmployeeInDepartment", b =>
                {
                    b.HasOne("CourtCaseDomain.Department", "Department")
                        .WithMany("EmployeeInDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_EMPLOYEE_DEPARTMEN_DEPARTME");

                    b.HasOne("CourtCaseDomain.Employee", "Employee")
                        .WithMany("EmployeeInDepartments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EMPLOYEE_EMPLOYEEO_EMPLOYEE");

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CourtCaseDomain.Hearing", b =>
                {
                    b.HasOne("CourtCaseDomain.Court", "Court")
                        .WithMany("Hearings")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_HEARING_RELATIONS_COURT");

                    b.HasOne("CourtCaseDomain.Case", "Case")
                        .WithMany("Hearings")
                        .HasForeignKey("DepartmentId", "TypeId", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HEARING_RELATIONS_CASE");

                    b.Navigation("Case");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("CourtCaseDomain.JobPerType", b =>
                {
                    b.HasOne("CourtCaseDomain.JobCatalog", "Job")
                        .WithMany("JobPerTypes")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JOBPERTY_RELATIONS_JOBCATAL");

                    b.HasOne("CourtCaseDomain.SubjectType", "Type")
                        .WithMany("JobPerTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JOBPERTY_RELATIONS_SUBJECTT");

                    b.Navigation("Job");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CourtCaseDomain.Case", b =>
                {
                    b.Navigation("CasePhaseHistories");

                    b.Navigation("CaseStatusHistories");

                    b.Navigation("CaseWorkers");

                    b.Navigation("CourtCases");

                    b.Navigation("Hearings");
                });

            modelBuilder.Entity("CourtCaseDomain.CasePhase", b =>
                {
                    b.Navigation("CasePhaseHistories");
                });

            modelBuilder.Entity("CourtCaseDomain.CaseStatus", b =>
                {
                    b.Navigation("CaseStatusHistories");

                    b.Navigation("Cases");
                });

            modelBuilder.Entity("CourtCaseDomain.Court", b =>
                {
                    b.Navigation("CourtCases");

                    b.Navigation("Hearings");
                });

            modelBuilder.Entity("CourtCaseDomain.Department", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("EmployeeInDepartments");
                });

            modelBuilder.Entity("CourtCaseDomain.Employee", b =>
                {
                    b.Navigation("CaseWorkers");

                    b.Navigation("EmployeeInDepartments");
                });

            modelBuilder.Entity("CourtCaseDomain.JobCatalog", b =>
                {
                    b.Navigation("JobPerTypes");
                });

            modelBuilder.Entity("CourtCaseDomain.JobPerType", b =>
                {
                    b.Navigation("CaseWorkers");
                });

            modelBuilder.Entity("CourtCaseDomain.SubjectType", b =>
                {
                    b.Navigation("CasePhases");

                    b.Navigation("Cases");

                    b.Navigation("JobPerTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
